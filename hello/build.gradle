plugins {
    id 'cpp-library'
    id 'dev.nokee.cpp-language'
}



library {

    binaries.configureEach { CppBinary binary ->
        def compileTask = binary.compileTask.get()

        compileTask.source.from fileTree(dir: "src/main/cpp", include: "**/*.cpp")

        def toolChain = binary.toolChain
        if (toolChain instanceof VisualCpp) {
            compileTask.compilerArgs.addAll(["/TP"])
              } else if (toolChain instanceof GccCompatibleToolChain) {
            compileTask.compilerArgs.addAll(["-I", "cpp", "-std=c++11"])
        }

        def linkTask = linkTask.get()
        linkTask.linkerArgs.addAll(linkTask.targetPlatform.map {
            if (it.operatingSystem.isMacOsX()) {
                return ['-framework', 'IOKit','-framework', 'CoreFoundation']
            }
            return []
        })

    }
}
